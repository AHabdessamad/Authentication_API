@page "/login"
@inject HttpClient Http
@inject AuthenticationStateProvider authProvider
@layout EmptyLayout
@inject NavigationManager navigationManager

<EditForm Model="@user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="row mt-5">
        <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
            <div class="mb-3 text-center">
                <h3>LOGIN</h3>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3" role="alert">
                        @errorMessage
                    </div>
                }
            </div>
            <div class="mb-3">
                <label>User Name</label>
                <input  class="form-control" @bind="user.Username" placeholder="User Name" />
                <ValidationMessage For="@(() => user.Username)" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <input  type="password" @bind="user.Password" class="form-control" placeholder="Password" />
                <ValidationMessage For="@(() => user.Password)" />
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-color">Login</button>
            </div>
            <a href="/register" target="_blank">Register</a>
        </div>
    </div>
</EditForm>

@code {
    LogingDTO user = new LogingDTO();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        errorMessage = null;
        Console.WriteLine("Login page loaded");
        var customAuthService = (CustomAuthService)authProvider;
        var result = await customAuthService.LoginAsync(user.Username, user.Password);
        Console.WriteLine(result.Message);
        if (result.IsSuccess)
        {
            navigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = result.Message;
        }
    }

}


}
